#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaLibraryEditor.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MediaCatalogue")]
	public partial class MediaCatalogueDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMedia_File(Media_File instance);
    partial void UpdateMedia_File(Media_File instance);
    partial void DeleteMedia_File(Media_File instance);
    partial void InsertTV_SeriesMedia(TV_SeriesMedia instance);
    partial void UpdateTV_SeriesMedia(TV_SeriesMedia instance);
    partial void DeleteTV_SeriesMedia(TV_SeriesMedia instance);
    partial void InsertMedia_Item(Media_Item instance);
    partial void UpdateMedia_Item(Media_Item instance);
    partial void DeleteMedia_Item(Media_Item instance);
    partial void InsertMedia_Location(Media_Location instance);
    partial void UpdateMedia_Location(Media_Location instance);
    partial void DeleteMedia_Location(Media_Location instance);
    partial void InsertMedia_Segment(Media_Segment instance);
    partial void UpdateMedia_Segment(Media_Segment instance);
    partial void DeleteMedia_Segment(Media_Segment instance);
    partial void InsertMedia_Type(Media_Type instance);
    partial void UpdateMedia_Type(Media_Type instance);
    partial void DeleteMedia_Type(Media_Type instance);
    partial void InsertMusic_Artist(Music_Artist instance);
    partial void UpdateMusic_Artist(Music_Artist instance);
    partial void DeleteMusic_Artist(Music_Artist instance);
    partial void InsertMusic_Genre(Music_Genre instance);
    partial void UpdateMusic_Genre(Music_Genre instance);
    partial void DeleteMusic_Genre(Music_Genre instance);
    partial void InsertMusic_Track(Music_Track instance);
    partial void UpdateMusic_Track(Music_Track instance);
    partial void DeleteMusic_Track(Music_Track instance);
    partial void InsertTV_Category(TV_Category instance);
    partial void UpdateTV_Category(TV_Category instance);
    partial void DeleteTV_Category(TV_Category instance);
    partial void InsertTV_Presenter(TV_Presenter instance);
    partial void UpdateTV_Presenter(TV_Presenter instance);
    partial void DeleteTV_Presenter(TV_Presenter instance);
    partial void InsertTV_Series(TV_Series instance);
    partial void UpdateTV_Series(TV_Series instance);
    partial void DeleteTV_Series(TV_Series instance);
    partial void InsertTV_SeriesCategory(TV_SeriesCategory instance);
    partial void UpdateTV_SeriesCategory(TV_SeriesCategory instance);
    partial void DeleteTV_SeriesCategory(TV_SeriesCategory instance);
    #endregion
		
		public MediaCatalogueDataContext() : 
				base(global::MediaLibraryEditor.Properties.Settings.Default.MediaCatalogueConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MediaCatalogueDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaCatalogueDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaCatalogueDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaCatalogueDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Media_File> Media_Files
		{
			get
			{
				return this.GetTable<Media_File>();
			}
		}
		
		public System.Data.Linq.Table<TV_SeriesMedia> TV_SeriesMedias
		{
			get
			{
				return this.GetTable<TV_SeriesMedia>();
			}
		}
		
		public System.Data.Linq.Table<Media_Item> Media_Items
		{
			get
			{
				return this.GetTable<Media_Item>();
			}
		}
		
		public System.Data.Linq.Table<Media_Location> Media_Locations
		{
			get
			{
				return this.GetTable<Media_Location>();
			}
		}
		
		public System.Data.Linq.Table<Media_Segment> Media_Segments
		{
			get
			{
				return this.GetTable<Media_Segment>();
			}
		}
		
		public System.Data.Linq.Table<Media_Type> Media_Types
		{
			get
			{
				return this.GetTable<Media_Type>();
			}
		}
		
		public System.Data.Linq.Table<Music_Artist> Music_Artists
		{
			get
			{
				return this.GetTable<Music_Artist>();
			}
		}
		
		public System.Data.Linq.Table<Music_Genre> Music_Genres
		{
			get
			{
				return this.GetTable<Music_Genre>();
			}
		}
		
		public System.Data.Linq.Table<Music_Track> Music_Tracks
		{
			get
			{
				return this.GetTable<Music_Track>();
			}
		}
		
		public System.Data.Linq.Table<TV_Category> TV_Categories
		{
			get
			{
				return this.GetTable<TV_Category>();
			}
		}
		
		public System.Data.Linq.Table<TV_Presenter> TV_Presenters
		{
			get
			{
				return this.GetTable<TV_Presenter>();
			}
		}
		
		public System.Data.Linq.Table<TV_Series> TV_Series
		{
			get
			{
				return this.GetTable<TV_Series>();
			}
		}
		
		public System.Data.Linq.Table<TV_SeriesCategory> TV_SeriesCategories
		{
			get
			{
				return this.GetTable<TV_SeriesCategory>();
			}
		}
	}
	
	[Table(Name="dbo.Media_File")]
	public partial class Media_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Filename;
		
		private System.Nullable<long> _Size;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<System.Guid> _Media_Location_id;
		
		private EntitySet<Media_Item> _Media_Items;
		
		private EntityRef<Media_Location> _Media_Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnSizeChanging(System.Nullable<long> value);
    partial void OnSizeChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnMedia_Location_idChanging(System.Nullable<System.Guid> value);
    partial void OnMedia_Location_idChanged();
    #endregion
		
		public Media_File()
		{
			this._Media_Items = new EntitySet<Media_Item>(new Action<Media_Item>(this.attach_Media_Items), new Action<Media_Item>(this.detach_Media_Items));
			this._Media_Location = default(EntityRef<Media_Location>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(255)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt")]
		public System.Nullable<long> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Media_Location_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Media_Location_id
		{
			get
			{
				return this._Media_Location_id;
			}
			set
			{
				if ((this._Media_Location_id != value))
				{
					if (this._Media_Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_Location_idChanging(value);
					this.SendPropertyChanging();
					this._Media_Location_id = value;
					this.SendPropertyChanged("Media_Location_id");
					this.OnMedia_Location_idChanged();
				}
			}
		}
		
		[Association(Name="Media_File_Media_Item", Storage="_Media_Items", ThisKey="id", OtherKey="Media_File_id")]
		public EntitySet<Media_Item> Media_Items
		{
			get
			{
				return this._Media_Items;
			}
			set
			{
				this._Media_Items.Assign(value);
			}
		}
		
		[Association(Name="Media_Location_Media_File", Storage="_Media_Location", ThisKey="Media_Location_id", OtherKey="id", IsForeignKey=true)]
		public Media_Location Media_Location
		{
			get
			{
				return this._Media_Location.Entity;
			}
			set
			{
				Media_Location previousValue = this._Media_Location.Entity;
				if (((previousValue != value) 
							|| (this._Media_Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_Location.Entity = null;
						previousValue.Media_Files.Remove(this);
					}
					this._Media_Location.Entity = value;
					if ((value != null))
					{
						value.Media_Files.Add(this);
						this._Media_Location_id = value.id;
					}
					else
					{
						this._Media_Location_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Media_Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Media_Items(Media_Item entity)
		{
			this.SendPropertyChanging();
			entity.Media_File = this;
		}
		
		private void detach_Media_Items(Media_Item entity)
		{
			this.SendPropertyChanging();
			entity.Media_File = null;
		}
	}
	
	[Table(Name="dbo.TV_SeriesMedia")]
	public partial class TV_SeriesMedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Media_Item_id;
		
		private System.Guid _TV_Series_id;
		
		private EntityRef<Media_Item> _Media_Item;
		
		private EntityRef<TV_Series> _TV_Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnMedia_Item_idChanging(System.Guid value);
    partial void OnMedia_Item_idChanged();
    partial void OnTV_Series_idChanging(System.Guid value);
    partial void OnTV_Series_idChanged();
    #endregion
		
		public TV_SeriesMedia()
		{
			this._Media_Item = default(EntityRef<Media_Item>);
			this._TV_Series = default(EntityRef<TV_Series>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Media_Item_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Media_Item_id
		{
			get
			{
				return this._Media_Item_id;
			}
			set
			{
				if ((this._Media_Item_id != value))
				{
					if (this._Media_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_Item_idChanging(value);
					this.SendPropertyChanging();
					this._Media_Item_id = value;
					this.SendPropertyChanged("Media_Item_id");
					this.OnMedia_Item_idChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Series_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TV_Series_id
		{
			get
			{
				return this._TV_Series_id;
			}
			set
			{
				if ((this._TV_Series_id != value))
				{
					if (this._TV_Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Series_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Series_id = value;
					this.SendPropertyChanged("TV_Series_id");
					this.OnTV_Series_idChanged();
				}
			}
		}
		
		[Association(Name="Media_Item_TV_SeriesMedia", Storage="_Media_Item", ThisKey="Media_Item_id", OtherKey="id", IsForeignKey=true)]
		public Media_Item Media_Item
		{
			get
			{
				return this._Media_Item.Entity;
			}
			set
			{
				Media_Item previousValue = this._Media_Item.Entity;
				if (((previousValue != value) 
							|| (this._Media_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_Item.Entity = null;
						previousValue.TV_SeriesMedias.Remove(this);
					}
					this._Media_Item.Entity = value;
					if ((value != null))
					{
						value.TV_SeriesMedias.Add(this);
						this._Media_Item_id = value.id;
					}
					else
					{
						this._Media_Item_id = default(System.Guid);
					}
					this.SendPropertyChanged("Media_Item");
				}
			}
		}
		
		[Association(Name="TV_Sery_TV_SeriesMedia", Storage="_TV_Series", ThisKey="TV_Series_id", OtherKey="id", IsForeignKey=true)]
		public TV_Series TV_Series
		{
			get
			{
				return this._TV_Series.Entity;
			}
			set
			{
				TV_Series previousValue = this._TV_Series.Entity;
				if (((previousValue != value) 
							|| (this._TV_Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Series.Entity = null;
						previousValue.TV_SeriesMedias.Remove(this);
					}
					this._TV_Series.Entity = value;
					if ((value != null))
					{
						value.TV_SeriesMedias.Add(this);
						this._TV_Series_id = value.id;
					}
					else
					{
						this._TV_Series_id = default(System.Guid);
					}
					this.SendPropertyChanged("TV_Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Media_Item")]
	public partial class Media_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _Media_File_id;
		
		private System.Nullable<System.Guid> _Media_Type_id;
		
		private EntitySet<TV_SeriesMedia> _TV_SeriesMedias;
		
		private EntitySet<Media_Segment> _Media_Segments;
		
		private EntitySet<Music_Track> _Music_Tracks;
		
		private EntityRef<Media_File> _Media_File;
		
		private EntityRef<Media_Type> _Media_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMedia_File_idChanging(System.Nullable<System.Guid> value);
    partial void OnMedia_File_idChanged();
    partial void OnMedia_Type_idChanging(System.Nullable<System.Guid> value);
    partial void OnMedia_Type_idChanged();
    #endregion
		
		public Media_Item()
		{
			this._TV_SeriesMedias = new EntitySet<TV_SeriesMedia>(new Action<TV_SeriesMedia>(this.attach_TV_SeriesMedias), new Action<TV_SeriesMedia>(this.detach_TV_SeriesMedias));
			this._Media_Segments = new EntitySet<Media_Segment>(new Action<Media_Segment>(this.attach_Media_Segments), new Action<Media_Segment>(this.detach_Media_Segments));
			this._Music_Tracks = new EntitySet<Music_Track>(new Action<Music_Track>(this.attach_Music_Tracks), new Action<Music_Track>(this.detach_Music_Tracks));
			this._Media_File = default(EntityRef<Media_File>);
			this._Media_Type = default(EntityRef<Media_Type>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(80)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Media_File_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Media_File_id
		{
			get
			{
				return this._Media_File_id;
			}
			set
			{
				if ((this._Media_File_id != value))
				{
					if (this._Media_File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_File_idChanging(value);
					this.SendPropertyChanging();
					this._Media_File_id = value;
					this.SendPropertyChanged("Media_File_id");
					this.OnMedia_File_idChanged();
				}
			}
		}
		
		[Column(Storage="_Media_Type_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Media_Type_id
		{
			get
			{
				return this._Media_Type_id;
			}
			set
			{
				if ((this._Media_Type_id != value))
				{
					if (this._Media_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_Type_idChanging(value);
					this.SendPropertyChanging();
					this._Media_Type_id = value;
					this.SendPropertyChanged("Media_Type_id");
					this.OnMedia_Type_idChanged();
				}
			}
		}
		
		[Association(Name="Media_Item_TV_SeriesMedia", Storage="_TV_SeriesMedias", ThisKey="id", OtherKey="Media_Item_id")]
		public EntitySet<TV_SeriesMedia> TV_SeriesMedias
		{
			get
			{
				return this._TV_SeriesMedias;
			}
			set
			{
				this._TV_SeriesMedias.Assign(value);
			}
		}
		
		[Association(Name="Media_Item_Media_Segment", Storage="_Media_Segments", ThisKey="id", OtherKey="Media_Item_id")]
		public EntitySet<Media_Segment> Media_Segments
		{
			get
			{
				return this._Media_Segments;
			}
			set
			{
				this._Media_Segments.Assign(value);
			}
		}
		
		[Association(Name="Media_Item_Music_Track", Storage="_Music_Tracks", ThisKey="id", OtherKey="Media_Item_id")]
		public EntitySet<Music_Track> Music_Tracks
		{
			get
			{
				return this._Music_Tracks;
			}
			set
			{
				this._Music_Tracks.Assign(value);
			}
		}
		
		[Association(Name="Media_File_Media_Item", Storage="_Media_File", ThisKey="Media_File_id", OtherKey="id", IsForeignKey=true)]
		public Media_File Media_File
		{
			get
			{
				return this._Media_File.Entity;
			}
			set
			{
				Media_File previousValue = this._Media_File.Entity;
				if (((previousValue != value) 
							|| (this._Media_File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_File.Entity = null;
						previousValue.Media_Items.Remove(this);
					}
					this._Media_File.Entity = value;
					if ((value != null))
					{
						value.Media_Items.Add(this);
						this._Media_File_id = value.id;
					}
					else
					{
						this._Media_File_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Media_File");
				}
			}
		}
		
		[Association(Name="Media_Type_Media_Item", Storage="_Media_Type", ThisKey="Media_Type_id", OtherKey="id", IsForeignKey=true)]
		public Media_Type Media_Type
		{
			get
			{
				return this._Media_Type.Entity;
			}
			set
			{
				Media_Type previousValue = this._Media_Type.Entity;
				if (((previousValue != value) 
							|| (this._Media_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_Type.Entity = null;
						previousValue.Media_Items.Remove(this);
					}
					this._Media_Type.Entity = value;
					if ((value != null))
					{
						value.Media_Items.Add(this);
						this._Media_Type_id = value.id;
					}
					else
					{
						this._Media_Type_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Media_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TV_SeriesMedias(TV_SeriesMedia entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = this;
		}
		
		private void detach_TV_SeriesMedias(TV_SeriesMedia entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = null;
		}
		
		private void attach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = this;
		}
		
		private void detach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = null;
		}
		
		private void attach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = this;
		}
		
		private void detach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Media_Item = null;
		}
	}
	
	[Table(Name="dbo.Media_Location")]
	public partial class Media_Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Title;
		
		private string _RelativePath;
		
		private System.Data.Linq.Binary _DiskSignature;
		
		private string _DriveLetter;
		
		private EntitySet<Media_File> _Media_Files;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRelativePathChanging(string value);
    partial void OnRelativePathChanged();
    partial void OnDiskSignatureChanging(System.Data.Linq.Binary value);
    partial void OnDiskSignatureChanged();
    partial void OnDriveLetterChanging(string value);
    partial void OnDriveLetterChanged();
    #endregion
		
		public Media_Location()
		{
			this._Media_Files = new EntitySet<Media_File>(new Action<Media_File>(this.attach_Media_Files), new Action<Media_File>(this.detach_Media_Files));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_RelativePath", DbType="VarChar(255)")]
		public string RelativePath
		{
			get
			{
				return this._RelativePath;
			}
			set
			{
				if ((this._RelativePath != value))
				{
					this.OnRelativePathChanging(value);
					this.SendPropertyChanging();
					this._RelativePath = value;
					this.SendPropertyChanged("RelativePath");
					this.OnRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_DiskSignature", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DiskSignature
		{
			get
			{
				return this._DiskSignature;
			}
			set
			{
				if ((this._DiskSignature != value))
				{
					this.OnDiskSignatureChanging(value);
					this.SendPropertyChanging();
					this._DiskSignature = value;
					this.SendPropertyChanged("DiskSignature");
					this.OnDiskSignatureChanged();
				}
			}
		}
		
		[Column(Storage="_DriveLetter", DbType="Char(3)")]
		public string DriveLetter
		{
			get
			{
				return this._DriveLetter;
			}
			set
			{
				if ((this._DriveLetter != value))
				{
					this.OnDriveLetterChanging(value);
					this.SendPropertyChanging();
					this._DriveLetter = value;
					this.SendPropertyChanged("DriveLetter");
					this.OnDriveLetterChanged();
				}
			}
		}
		
		[Association(Name="Media_Location_Media_File", Storage="_Media_Files", ThisKey="id", OtherKey="Media_Location_id")]
		public EntitySet<Media_File> Media_Files
		{
			get
			{
				return this._Media_Files;
			}
			set
			{
				this._Media_Files.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Media_Files(Media_File entity)
		{
			this.SendPropertyChanging();
			entity.Media_Location = this;
		}
		
		private void detach_Media_Files(Media_File entity)
		{
			this.SendPropertyChanging();
			entity.Media_Location = null;
		}
	}
	
	[Table(Name="dbo.Media_Segment")]
	public partial class Media_Segment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Media_Item_id;
		
		private System.Nullable<System.Guid> _TV_Presenter_id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _SectionOffset;
		
		private System.Nullable<int> _SectionLength;
		
		private System.Nullable<int> _PageNumber;
		
		private System.Nullable<System.Guid> _TV_Category_id;
		
		private EntityRef<Media_Item> _Media_Item;
		
		private EntityRef<TV_Category> _TV_Category;
		
		private EntityRef<TV_Presenter> _TV_Presenter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnMedia_Item_idChanging(System.Nullable<System.Guid> value);
    partial void OnMedia_Item_idChanged();
    partial void OnTV_Presenter_idChanging(System.Nullable<System.Guid> value);
    partial void OnTV_Presenter_idChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSectionOffsetChanging(System.Nullable<int> value);
    partial void OnSectionOffsetChanged();
    partial void OnSectionLengthChanging(System.Nullable<int> value);
    partial void OnSectionLengthChanged();
    partial void OnPageNumberChanging(System.Nullable<int> value);
    partial void OnPageNumberChanged();
    partial void OnTV_Category_idChanging(System.Nullable<System.Guid> value);
    partial void OnTV_Category_idChanged();
    #endregion
		
		public Media_Segment()
		{
			this._Media_Item = default(EntityRef<Media_Item>);
			this._TV_Category = default(EntityRef<TV_Category>);
			this._TV_Presenter = default(EntityRef<TV_Presenter>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Media_Item_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Media_Item_id
		{
			get
			{
				return this._Media_Item_id;
			}
			set
			{
				if ((this._Media_Item_id != value))
				{
					if (this._Media_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_Item_idChanging(value);
					this.SendPropertyChanging();
					this._Media_Item_id = value;
					this.SendPropertyChanged("Media_Item_id");
					this.OnMedia_Item_idChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Presenter_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TV_Presenter_id
		{
			get
			{
				return this._TV_Presenter_id;
			}
			set
			{
				if ((this._TV_Presenter_id != value))
				{
					if (this._TV_Presenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Presenter_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Presenter_id = value;
					this.SendPropertyChanged("TV_Presenter_id");
					this.OnTV_Presenter_idChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(80)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SectionOffset", DbType="Int")]
		public System.Nullable<int> SectionOffset
		{
			get
			{
				return this._SectionOffset;
			}
			set
			{
				if ((this._SectionOffset != value))
				{
					this.OnSectionOffsetChanging(value);
					this.SendPropertyChanging();
					this._SectionOffset = value;
					this.SendPropertyChanged("SectionOffset");
					this.OnSectionOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_SectionLength", DbType="Int")]
		public System.Nullable<int> SectionLength
		{
			get
			{
				return this._SectionLength;
			}
			set
			{
				if ((this._SectionLength != value))
				{
					this.OnSectionLengthChanging(value);
					this.SendPropertyChanging();
					this._SectionLength = value;
					this.SendPropertyChanged("SectionLength");
					this.OnSectionLengthChanged();
				}
			}
		}
		
		[Column(Storage="_PageNumber", DbType="Int")]
		public System.Nullable<int> PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Category_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TV_Category_id
		{
			get
			{
				return this._TV_Category_id;
			}
			set
			{
				if ((this._TV_Category_id != value))
				{
					if (this._TV_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Category_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Category_id = value;
					this.SendPropertyChanged("TV_Category_id");
					this.OnTV_Category_idChanged();
				}
			}
		}
		
		[Association(Name="Media_Item_Media_Segment", Storage="_Media_Item", ThisKey="Media_Item_id", OtherKey="id", IsForeignKey=true)]
		public Media_Item Media_Item
		{
			get
			{
				return this._Media_Item.Entity;
			}
			set
			{
				Media_Item previousValue = this._Media_Item.Entity;
				if (((previousValue != value) 
							|| (this._Media_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_Item.Entity = null;
						previousValue.Media_Segments.Remove(this);
					}
					this._Media_Item.Entity = value;
					if ((value != null))
					{
						value.Media_Segments.Add(this);
						this._Media_Item_id = value.id;
					}
					else
					{
						this._Media_Item_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Media_Item");
				}
			}
		}
		
		[Association(Name="TV_Category_Media_Segment", Storage="_TV_Category", ThisKey="TV_Category_id", OtherKey="id", IsForeignKey=true)]
		public TV_Category TV_Category
		{
			get
			{
				return this._TV_Category.Entity;
			}
			set
			{
				TV_Category previousValue = this._TV_Category.Entity;
				if (((previousValue != value) 
							|| (this._TV_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Category.Entity = null;
						previousValue.Media_Segments.Remove(this);
					}
					this._TV_Category.Entity = value;
					if ((value != null))
					{
						value.Media_Segments.Add(this);
						this._TV_Category_id = value.id;
					}
					else
					{
						this._TV_Category_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TV_Category");
				}
			}
		}
		
		[Association(Name="TV_Presenter_Media_Segment", Storage="_TV_Presenter", ThisKey="TV_Presenter_id", OtherKey="id", IsForeignKey=true)]
		public TV_Presenter TV_Presenter
		{
			get
			{
				return this._TV_Presenter.Entity;
			}
			set
			{
				TV_Presenter previousValue = this._TV_Presenter.Entity;
				if (((previousValue != value) 
							|| (this._TV_Presenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Presenter.Entity = null;
						previousValue.Media_Segments.Remove(this);
					}
					this._TV_Presenter.Entity = value;
					if ((value != null))
					{
						value.Media_Segments.Add(this);
						this._TV_Presenter_id = value.id;
					}
					else
					{
						this._TV_Presenter_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TV_Presenter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Media_Type")]
	public partial class Media_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Description;
		
		private EntitySet<Media_Item> _Media_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Media_Type()
		{
			this._Media_Items = new EntitySet<Media_Item>(new Action<Media_Item>(this.attach_Media_Items), new Action<Media_Item>(this.detach_Media_Items));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Media_Type_Media_Item", Storage="_Media_Items", ThisKey="id", OtherKey="Media_Type_id")]
		public EntitySet<Media_Item> Media_Items
		{
			get
			{
				return this._Media_Items;
			}
			set
			{
				this._Media_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Media_Items(Media_Item entity)
		{
			this.SendPropertyChanging();
			entity.Media_Type = this;
		}
		
		private void detach_Media_Items(Media_Item entity)
		{
			this.SendPropertyChanging();
			entity.Media_Type = null;
		}
	}
	
	[Table(Name="dbo.Music_Artist")]
	public partial class Music_Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Name;
		
		private EntitySet<Music_Track> _Music_Tracks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Music_Artist()
		{
			this._Music_Tracks = new EntitySet<Music_Track>(new Action<Music_Track>(this.attach_Music_Tracks), new Action<Music_Track>(this.detach_Music_Tracks));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Music_Artist_Music_Track", Storage="_Music_Tracks", ThisKey="id", OtherKey="Music_Artist_id")]
		public EntitySet<Music_Track> Music_Tracks
		{
			get
			{
				return this._Music_Tracks;
			}
			set
			{
				this._Music_Tracks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Music_Artist = this;
		}
		
		private void detach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Music_Artist = null;
		}
	}
	
	[Table(Name="dbo.Music_Genre")]
	public partial class Music_Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Parent_Genre_id;
		
		private string _Description;
		
		private EntitySet<Music_Genre> _Music_Genres;
		
		private EntitySet<Music_Track> _Music_Tracks;
		
		private EntityRef<Music_Genre> _Music_Genre1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnParent_Genre_idChanging(System.Nullable<System.Guid> value);
    partial void OnParent_Genre_idChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Music_Genre()
		{
			this._Music_Genres = new EntitySet<Music_Genre>(new Action<Music_Genre>(this.attach_Music_Genres), new Action<Music_Genre>(this.detach_Music_Genres));
			this._Music_Tracks = new EntitySet<Music_Track>(new Action<Music_Track>(this.attach_Music_Tracks), new Action<Music_Track>(this.detach_Music_Tracks));
			this._Music_Genre1 = default(EntityRef<Music_Genre>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Parent_Genre_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Parent_Genre_id
		{
			get
			{
				return this._Parent_Genre_id;
			}
			set
			{
				if ((this._Parent_Genre_id != value))
				{
					if (this._Music_Genre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParent_Genre_idChanging(value);
					this.SendPropertyChanging();
					this._Parent_Genre_id = value;
					this.SendPropertyChanged("Parent_Genre_id");
					this.OnParent_Genre_idChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Music_Genre_Music_Genre", Storage="_Music_Genres", ThisKey="id", OtherKey="Parent_Genre_id")]
		public EntitySet<Music_Genre> Music_Genres
		{
			get
			{
				return this._Music_Genres;
			}
			set
			{
				this._Music_Genres.Assign(value);
			}
		}
		
		[Association(Name="Music_Genre_Music_Track", Storage="_Music_Tracks", ThisKey="id", OtherKey="Music_Genre_id")]
		public EntitySet<Music_Track> Music_Tracks
		{
			get
			{
				return this._Music_Tracks;
			}
			set
			{
				this._Music_Tracks.Assign(value);
			}
		}
		
		[Association(Name="Music_Genre_Music_Genre", Storage="_Music_Genre1", ThisKey="Parent_Genre_id", OtherKey="id", IsForeignKey=true)]
		public Music_Genre Music_Genre1
		{
			get
			{
				return this._Music_Genre1.Entity;
			}
			set
			{
				Music_Genre previousValue = this._Music_Genre1.Entity;
				if (((previousValue != value) 
							|| (this._Music_Genre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Music_Genre1.Entity = null;
						previousValue.Music_Genres.Remove(this);
					}
					this._Music_Genre1.Entity = value;
					if ((value != null))
					{
						value.Music_Genres.Add(this);
						this._Parent_Genre_id = value.id;
					}
					else
					{
						this._Parent_Genre_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Music_Genre1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Music_Genres(Music_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre1 = this;
		}
		
		private void detach_Music_Genres(Music_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre1 = null;
		}
		
		private void attach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre = this;
		}
		
		private void detach_Music_Tracks(Music_Track entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre = null;
		}
	}
	
	[Table(Name="dbo.Music_Track")]
	public partial class Music_Track : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Media_Item_id;
		
		private System.Nullable<System.Guid> _Music_Artist_id;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<System.Guid> _Music_Genre_id;
		
		private EntityRef<Media_Item> _Media_Item;
		
		private EntityRef<Music_Artist> _Music_Artist;
		
		private EntityRef<Music_Genre> _Music_Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnMedia_Item_idChanging(System.Nullable<System.Guid> value);
    partial void OnMedia_Item_idChanged();
    partial void OnMusic_Artist_idChanging(System.Nullable<System.Guid> value);
    partial void OnMusic_Artist_idChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnMusic_Genre_idChanging(System.Nullable<System.Guid> value);
    partial void OnMusic_Genre_idChanged();
    #endregion
		
		public Music_Track()
		{
			this._Media_Item = default(EntityRef<Media_Item>);
			this._Music_Artist = default(EntityRef<Music_Artist>);
			this._Music_Genre = default(EntityRef<Music_Genre>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Media_Item_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Media_Item_id
		{
			get
			{
				return this._Media_Item_id;
			}
			set
			{
				if ((this._Media_Item_id != value))
				{
					if (this._Media_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedia_Item_idChanging(value);
					this.SendPropertyChanging();
					this._Media_Item_id = value;
					this.SendPropertyChanged("Media_Item_id");
					this.OnMedia_Item_idChanged();
				}
			}
		}
		
		[Column(Storage="_Music_Artist_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Music_Artist_id
		{
			get
			{
				return this._Music_Artist_id;
			}
			set
			{
				if ((this._Music_Artist_id != value))
				{
					if (this._Music_Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusic_Artist_idChanging(value);
					this.SendPropertyChanging();
					this._Music_Artist_id = value;
					this.SendPropertyChanged("Music_Artist_id");
					this.OnMusic_Artist_idChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_Music_Genre_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Music_Genre_id
		{
			get
			{
				return this._Music_Genre_id;
			}
			set
			{
				if ((this._Music_Genre_id != value))
				{
					if (this._Music_Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusic_Genre_idChanging(value);
					this.SendPropertyChanging();
					this._Music_Genre_id = value;
					this.SendPropertyChanged("Music_Genre_id");
					this.OnMusic_Genre_idChanged();
				}
			}
		}
		
		[Association(Name="Media_Item_Music_Track", Storage="_Media_Item", ThisKey="Media_Item_id", OtherKey="id", IsForeignKey=true)]
		public Media_Item Media_Item
		{
			get
			{
				return this._Media_Item.Entity;
			}
			set
			{
				Media_Item previousValue = this._Media_Item.Entity;
				if (((previousValue != value) 
							|| (this._Media_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media_Item.Entity = null;
						previousValue.Music_Tracks.Remove(this);
					}
					this._Media_Item.Entity = value;
					if ((value != null))
					{
						value.Music_Tracks.Add(this);
						this._Media_Item_id = value.id;
					}
					else
					{
						this._Media_Item_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Media_Item");
				}
			}
		}
		
		[Association(Name="Music_Artist_Music_Track", Storage="_Music_Artist", ThisKey="Music_Artist_id", OtherKey="id", IsForeignKey=true)]
		public Music_Artist Music_Artist
		{
			get
			{
				return this._Music_Artist.Entity;
			}
			set
			{
				Music_Artist previousValue = this._Music_Artist.Entity;
				if (((previousValue != value) 
							|| (this._Music_Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Music_Artist.Entity = null;
						previousValue.Music_Tracks.Remove(this);
					}
					this._Music_Artist.Entity = value;
					if ((value != null))
					{
						value.Music_Tracks.Add(this);
						this._Music_Artist_id = value.id;
					}
					else
					{
						this._Music_Artist_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Music_Artist");
				}
			}
		}
		
		[Association(Name="Music_Genre_Music_Track", Storage="_Music_Genre", ThisKey="Music_Genre_id", OtherKey="id", IsForeignKey=true)]
		public Music_Genre Music_Genre
		{
			get
			{
				return this._Music_Genre.Entity;
			}
			set
			{
				Music_Genre previousValue = this._Music_Genre.Entity;
				if (((previousValue != value) 
							|| (this._Music_Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Music_Genre.Entity = null;
						previousValue.Music_Tracks.Remove(this);
					}
					this._Music_Genre.Entity = value;
					if ((value != null))
					{
						value.Music_Tracks.Add(this);
						this._Music_Genre_id = value.id;
					}
					else
					{
						this._Music_Genre_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Music_Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TV_Category")]
	public partial class TV_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<Media_Segment> _Media_Segments;
		
		private EntitySet<TV_SeriesCategory> _TV_SeriesCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TV_Category()
		{
			this._Media_Segments = new EntitySet<Media_Segment>(new Action<Media_Segment>(this.attach_Media_Segments), new Action<Media_Segment>(this.detach_Media_Segments));
			this._TV_SeriesCategories = new EntitySet<TV_SeriesCategory>(new Action<TV_SeriesCategory>(this.attach_TV_SeriesCategories), new Action<TV_SeriesCategory>(this.detach_TV_SeriesCategories));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="TV_Category_Media_Segment", Storage="_Media_Segments", ThisKey="id", OtherKey="TV_Category_id")]
		public EntitySet<Media_Segment> Media_Segments
		{
			get
			{
				return this._Media_Segments;
			}
			set
			{
				this._Media_Segments.Assign(value);
			}
		}
		
		[Association(Name="TV_Category_TV_SeriesCategory", Storage="_TV_SeriesCategories", ThisKey="id", OtherKey="TV_Category_id")]
		public EntitySet<TV_SeriesCategory> TV_SeriesCategories
		{
			get
			{
				return this._TV_SeriesCategories;
			}
			set
			{
				this._TV_SeriesCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.TV_Category = this;
		}
		
		private void detach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.TV_Category = null;
		}
		
		private void attach_TV_SeriesCategories(TV_SeriesCategory entity)
		{
			this.SendPropertyChanging();
			entity.TV_Category = this;
		}
		
		private void detach_TV_SeriesCategories(TV_SeriesCategory entity)
		{
			this.SendPropertyChanging();
			entity.TV_Category = null;
		}
	}
	
	[Table(Name="dbo.TV_Presenter")]
	public partial class TV_Presenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _TV_Series_id;
		
		private string _Name;
		
		private EntitySet<Media_Segment> _Media_Segments;
		
		private EntityRef<TV_Series> _TV_Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTV_Series_idChanging(System.Nullable<System.Guid> value);
    partial void OnTV_Series_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TV_Presenter()
		{
			this._Media_Segments = new EntitySet<Media_Segment>(new Action<Media_Segment>(this.attach_Media_Segments), new Action<Media_Segment>(this.detach_Media_Segments));
			this._TV_Series = default(EntityRef<TV_Series>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Series_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TV_Series_id
		{
			get
			{
				return this._TV_Series_id;
			}
			set
			{
				if ((this._TV_Series_id != value))
				{
					if (this._TV_Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Series_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Series_id = value;
					this.SendPropertyChanged("TV_Series_id");
					this.OnTV_Series_idChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="TV_Presenter_Media_Segment", Storage="_Media_Segments", ThisKey="id", OtherKey="TV_Presenter_id")]
		public EntitySet<Media_Segment> Media_Segments
		{
			get
			{
				return this._Media_Segments;
			}
			set
			{
				this._Media_Segments.Assign(value);
			}
		}
		
		[Association(Name="TV_Sery_TV_Presenter", Storage="_TV_Series", ThisKey="TV_Series_id", OtherKey="id", IsForeignKey=true)]
		public TV_Series TV_Series
		{
			get
			{
				return this._TV_Series.Entity;
			}
			set
			{
				TV_Series previousValue = this._TV_Series.Entity;
				if (((previousValue != value) 
							|| (this._TV_Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Series.Entity = null;
						previousValue.TV_Presenters.Remove(this);
					}
					this._TV_Series.Entity = value;
					if ((value != null))
					{
						value.TV_Presenters.Add(this);
						this._TV_Series_id = value.id;
					}
					else
					{
						this._TV_Series_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TV_Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.TV_Presenter = this;
		}
		
		private void detach_Media_Segments(Media_Segment entity)
		{
			this.SendPropertyChanging();
			entity.TV_Presenter = null;
		}
	}
	
	[Table(Name="dbo.TV_Series")]
	public partial class TV_Series : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Description;
		
		private EntitySet<TV_SeriesMedia> _TV_SeriesMedias;
		
		private EntitySet<TV_Presenter> _TV_Presenters;
		
		private EntitySet<TV_SeriesCategory> _TV_SeriesCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TV_Series()
		{
			this._TV_SeriesMedias = new EntitySet<TV_SeriesMedia>(new Action<TV_SeriesMedia>(this.attach_TV_SeriesMedias), new Action<TV_SeriesMedia>(this.detach_TV_SeriesMedias));
			this._TV_Presenters = new EntitySet<TV_Presenter>(new Action<TV_Presenter>(this.attach_TV_Presenters), new Action<TV_Presenter>(this.detach_TV_Presenters));
			this._TV_SeriesCategories = new EntitySet<TV_SeriesCategory>(new Action<TV_SeriesCategory>(this.attach_TV_SeriesCategories), new Action<TV_SeriesCategory>(this.detach_TV_SeriesCategories));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="TV_Sery_TV_SeriesMedia", Storage="_TV_SeriesMedias", ThisKey="id", OtherKey="TV_Series_id")]
		public EntitySet<TV_SeriesMedia> TV_SeriesMedias
		{
			get
			{
				return this._TV_SeriesMedias;
			}
			set
			{
				this._TV_SeriesMedias.Assign(value);
			}
		}
		
		[Association(Name="TV_Sery_TV_Presenter", Storage="_TV_Presenters", ThisKey="id", OtherKey="TV_Series_id")]
		public EntitySet<TV_Presenter> TV_Presenters
		{
			get
			{
				return this._TV_Presenters;
			}
			set
			{
				this._TV_Presenters.Assign(value);
			}
		}
		
		[Association(Name="TV_Sery_TV_SeriesCategory", Storage="_TV_SeriesCategories", ThisKey="id", OtherKey="TV_Series_id")]
		public EntitySet<TV_SeriesCategory> TV_SeriesCategories
		{
			get
			{
				return this._TV_SeriesCategories;
			}
			set
			{
				this._TV_SeriesCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TV_SeriesMedias(TV_SeriesMedia entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = this;
		}
		
		private void detach_TV_SeriesMedias(TV_SeriesMedia entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = null;
		}
		
		private void attach_TV_Presenters(TV_Presenter entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = this;
		}
		
		private void detach_TV_Presenters(TV_Presenter entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = null;
		}
		
		private void attach_TV_SeriesCategories(TV_SeriesCategory entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = this;
		}
		
		private void detach_TV_SeriesCategories(TV_SeriesCategory entity)
		{
			this.SendPropertyChanging();
			entity.TV_Series = null;
		}
	}
	
	[Table(Name="dbo.TV_SeriesCategory")]
	public partial class TV_SeriesCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _TV_Series_id;
		
		private System.Guid _TV_Category_id;
		
		private EntityRef<TV_Category> _TV_Category;
		
		private EntityRef<TV_Series> _TV_Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTV_Series_idChanging(System.Guid value);
    partial void OnTV_Series_idChanged();
    partial void OnTV_Category_idChanging(System.Guid value);
    partial void OnTV_Category_idChanged();
    #endregion
		
		public TV_SeriesCategory()
		{
			this._TV_Category = default(EntityRef<TV_Category>);
			this._TV_Series = default(EntityRef<TV_Series>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Series_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TV_Series_id
		{
			get
			{
				return this._TV_Series_id;
			}
			set
			{
				if ((this._TV_Series_id != value))
				{
					if (this._TV_Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Series_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Series_id = value;
					this.SendPropertyChanged("TV_Series_id");
					this.OnTV_Series_idChanged();
				}
			}
		}
		
		[Column(Storage="_TV_Category_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TV_Category_id
		{
			get
			{
				return this._TV_Category_id;
			}
			set
			{
				if ((this._TV_Category_id != value))
				{
					if (this._TV_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTV_Category_idChanging(value);
					this.SendPropertyChanging();
					this._TV_Category_id = value;
					this.SendPropertyChanged("TV_Category_id");
					this.OnTV_Category_idChanged();
				}
			}
		}
		
		[Association(Name="TV_Category_TV_SeriesCategory", Storage="_TV_Category", ThisKey="TV_Category_id", OtherKey="id", IsForeignKey=true)]
		public TV_Category TV_Category
		{
			get
			{
				return this._TV_Category.Entity;
			}
			set
			{
				TV_Category previousValue = this._TV_Category.Entity;
				if (((previousValue != value) 
							|| (this._TV_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Category.Entity = null;
						previousValue.TV_SeriesCategories.Remove(this);
					}
					this._TV_Category.Entity = value;
					if ((value != null))
					{
						value.TV_SeriesCategories.Add(this);
						this._TV_Category_id = value.id;
					}
					else
					{
						this._TV_Category_id = default(System.Guid);
					}
					this.SendPropertyChanged("TV_Category");
				}
			}
		}
		
		[Association(Name="TV_Sery_TV_SeriesCategory", Storage="_TV_Series", ThisKey="TV_Series_id", OtherKey="id", IsForeignKey=true)]
		public TV_Series TV_Series
		{
			get
			{
				return this._TV_Series.Entity;
			}
			set
			{
				TV_Series previousValue = this._TV_Series.Entity;
				if (((previousValue != value) 
							|| (this._TV_Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TV_Series.Entity = null;
						previousValue.TV_SeriesCategories.Remove(this);
					}
					this._TV_Series.Entity = value;
					if ((value != null))
					{
						value.TV_SeriesCategories.Add(this);
						this._TV_Series_id = value.id;
					}
					else
					{
						this._TV_Series_id = default(System.Guid);
					}
					this.SendPropertyChanged("TV_Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
