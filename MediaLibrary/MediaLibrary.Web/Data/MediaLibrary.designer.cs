#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaLibrary.Web.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MediaCatalogue")]
	public partial class MediaLibraryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertMediaSection(MediaSection instance);
    partial void UpdateMediaSection(MediaSection instance);
    partial void DeleteMediaSection(MediaSection instance);
    partial void InsertMediaSource(MediaSource instance);
    partial void UpdateMediaSource(MediaSource instance);
    partial void DeleteMediaSource(MediaSource instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    partial void InsertPresenter(Presenter instance);
    partial void UpdatePresenter(Presenter instance);
    partial void DeletePresenter(Presenter instance);
    #endregion
		
		public MediaLibraryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MediaCatalogueConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MediaLibraryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaLibraryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaLibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaLibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<MediaSection> MediaSections
		{
			get
			{
				return this.GetTable<MediaSection>();
			}
		}
		
		public System.Data.Linq.Table<MediaSource> MediaSources
		{
			get
			{
				return this.GetTable<MediaSource>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
		
		public System.Data.Linq.Table<Presenter> Presenters
		{
			get
			{
				return this.GetTable<Presenter>();
			}
		}
	}
	
	[Table(Name="dbo.Collection")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CollectionID;
		
		private string _Description;
		
		private EntitySet<MediaSource> _MediaSources;
		
		private EntitySet<Presenter> _Presenters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(System.Guid value);
    partial void OnCollectionIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Collection()
		{
			this._MediaSources = new EntitySet<MediaSource>(new Action<MediaSource>(this.attach_MediaSources), new Action<MediaSource>(this.detach_MediaSources));
			this._Presenters = new EntitySet<Presenter>(new Action<Presenter>(this.attach_Presenters), new Action<Presenter>(this.detach_Presenters));
			OnCreated();
		}
		
		[Column(Storage="_CollectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Collection_MediaSource", Storage="_MediaSources", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<MediaSource> MediaSources
		{
			get
			{
				return this._MediaSources;
			}
			set
			{
				this._MediaSources.Assign(value);
			}
		}
		
		[Association(Name="Collection_Presenter", Storage="_Presenters", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Presenter> Presenters
		{
			get
			{
				return this._Presenters;
			}
			set
			{
				this._Presenters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaSources(MediaSource entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_MediaSources(MediaSource entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_Presenters(Presenter entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Presenters(Presenter entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
	}
	
	[Table(Name="dbo.MediaSection")]
	public partial class MediaSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SectionID;
		
		private System.Guid _MediaSourceID;
		
		private System.Nullable<System.Guid> _PresenterID;
		
		private string _Description;
		
		private System.Nullable<int> _TimeOffset;
		
		private System.Nullable<int> _PageNumber;
		
		private string _Notes;
		
		private EntityRef<MediaSource> _MediaSource;
		
		private EntityRef<Presenter> _Presenter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIDChanging(System.Guid value);
    partial void OnSectionIDChanged();
    partial void OnMediaSourceIDChanging(System.Guid value);
    partial void OnMediaSourceIDChanged();
    partial void OnPresenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnPresenterIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeOffsetChanging(System.Nullable<int> value);
    partial void OnTimeOffsetChanged();
    partial void OnPageNumberChanging(System.Nullable<int> value);
    partial void OnPageNumberChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public MediaSection()
		{
			this._MediaSource = default(EntityRef<MediaSource>);
			this._Presenter = default(EntityRef<Presenter>);
			OnCreated();
		}
		
		[Column(Storage="_SectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_MediaSourceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MediaSourceID
		{
			get
			{
				return this._MediaSourceID;
			}
			set
			{
				if ((this._MediaSourceID != value))
				{
					if (this._MediaSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaSourceIDChanging(value);
					this.SendPropertyChanging();
					this._MediaSourceID = value;
					this.SendPropertyChanged("MediaSourceID");
					this.OnMediaSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_PresenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PresenterID
		{
			get
			{
				return this._PresenterID;
			}
			set
			{
				if ((this._PresenterID != value))
				{
					if (this._Presenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPresenterIDChanging(value);
					this.SendPropertyChanging();
					this._PresenterID = value;
					this.SendPropertyChanged("PresenterID");
					this.OnPresenterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_TimeOffset", DbType="Int")]
		public System.Nullable<int> TimeOffset
		{
			get
			{
				return this._TimeOffset;
			}
			set
			{
				if ((this._TimeOffset != value))
				{
					this.OnTimeOffsetChanging(value);
					this.SendPropertyChanging();
					this._TimeOffset = value;
					this.SendPropertyChanged("TimeOffset");
					this.OnTimeOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_PageNumber", DbType="Int")]
		public System.Nullable<int> PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="MediaSource_MediaSection", Storage="_MediaSource", ThisKey="MediaSourceID", OtherKey="MediaSourceID", IsForeignKey=true)]
		public MediaSource MediaSource
		{
			get
			{
				return this._MediaSource.Entity;
			}
			set
			{
				MediaSource previousValue = this._MediaSource.Entity;
				if (((previousValue != value) 
							|| (this._MediaSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaSource.Entity = null;
						previousValue.MediaSections.Remove(this);
					}
					this._MediaSource.Entity = value;
					if ((value != null))
					{
						value.MediaSections.Add(this);
						this._MediaSourceID = value.MediaSourceID;
					}
					else
					{
						this._MediaSourceID = default(System.Guid);
					}
					this.SendPropertyChanged("MediaSource");
				}
			}
		}
		
		[Association(Name="Presenter_MediaSection", Storage="_Presenter", ThisKey="PresenterID", OtherKey="PresenterID", IsForeignKey=true)]
		public Presenter Presenter
		{
			get
			{
				return this._Presenter.Entity;
			}
			set
			{
				Presenter previousValue = this._Presenter.Entity;
				if (((previousValue != value) 
							|| (this._Presenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Presenter.Entity = null;
						previousValue.MediaSections.Remove(this);
					}
					this._Presenter.Entity = value;
					if ((value != null))
					{
						value.MediaSections.Add(this);
						this._PresenterID = value.PresenterID;
					}
					else
					{
						this._PresenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Presenter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MediaSource")]
	public partial class MediaSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MediaSourceID;
		
		private System.Nullable<System.Guid> _MediaTypeID;
		
		private System.Nullable<System.Guid> _CollectionID;
		
		private string _FullPath;
		
		private string _Title;
		
		private EntitySet<MediaSection> _MediaSections;
		
		private EntityRef<Collection> _Collection;
		
		private EntityRef<MediaType> _MediaType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaSourceIDChanging(System.Guid value);
    partial void OnMediaSourceIDChanged();
    partial void OnMediaTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnMediaTypeIDChanged();
    partial void OnCollectionIDChanging(System.Nullable<System.Guid> value);
    partial void OnCollectionIDChanged();
    partial void OnFullPathChanging(string value);
    partial void OnFullPathChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public MediaSource()
		{
			this._MediaSections = new EntitySet<MediaSection>(new Action<MediaSection>(this.attach_MediaSections), new Action<MediaSection>(this.detach_MediaSections));
			this._Collection = default(EntityRef<Collection>);
			this._MediaType = default(EntityRef<MediaType>);
			OnCreated();
		}
		
		[Column(Storage="_MediaSourceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaSourceID
		{
			get
			{
				return this._MediaSourceID;
			}
			set
			{
				if ((this._MediaSourceID != value))
				{
					this.OnMediaSourceIDChanging(value);
					this.SendPropertyChanging();
					this._MediaSourceID = value;
					this.SendPropertyChanged("MediaSourceID");
					this.OnMediaSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_MediaTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					if (this._MediaType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CollectionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(255)")]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="MediaSource_MediaSection", Storage="_MediaSections", ThisKey="MediaSourceID", OtherKey="MediaSourceID")]
		public EntitySet<MediaSection> MediaSections
		{
			get
			{
				return this._MediaSections;
			}
			set
			{
				this._MediaSections.Assign(value);
			}
		}
		
		[Association(Name="Collection_MediaSource", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.MediaSources.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.MediaSources.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		[Association(Name="MediaType_MediaSource", Storage="_MediaType", ThisKey="MediaTypeID", OtherKey="MediaTypeID", IsForeignKey=true)]
		public MediaType MediaType
		{
			get
			{
				return this._MediaType.Entity;
			}
			set
			{
				MediaType previousValue = this._MediaType.Entity;
				if (((previousValue != value) 
							|| (this._MediaType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaType.Entity = null;
						previousValue.MediaSources.Remove(this);
					}
					this._MediaType.Entity = value;
					if ((value != null))
					{
						value.MediaSources.Add(this);
						this._MediaTypeID = value.MediaTypeID;
					}
					else
					{
						this._MediaTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MediaType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaSections(MediaSection entity)
		{
			this.SendPropertyChanging();
			entity.MediaSource = this;
		}
		
		private void detach_MediaSections(MediaSection entity)
		{
			this.SendPropertyChanging();
			entity.MediaSource = null;
		}
	}
	
	[Table(Name="dbo.MediaType")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MediaTypeID;
		
		private string _Description;
		
		private EntitySet<MediaSource> _MediaSources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeIDChanging(System.Guid value);
    partial void OnMediaTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MediaType()
		{
			this._MediaSources = new EntitySet<MediaSource>(new Action<MediaSource>(this.attach_MediaSources), new Action<MediaSource>(this.detach_MediaSources));
			OnCreated();
		}
		
		[Column(Storage="_MediaTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MediaType_MediaSource", Storage="_MediaSources", ThisKey="MediaTypeID", OtherKey="MediaTypeID")]
		public EntitySet<MediaSource> MediaSources
		{
			get
			{
				return this._MediaSources;
			}
			set
			{
				this._MediaSources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaSources(MediaSource entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = this;
		}
		
		private void detach_MediaSources(MediaSource entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = null;
		}
	}
	
	[Table(Name="dbo.Presenter")]
	public partial class Presenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PresenterID;
		
		private System.Nullable<System.Guid> _CollectionID;
		
		private string _Name;
		
		private EntitySet<MediaSection> _MediaSections;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPresenterIDChanging(System.Guid value);
    partial void OnPresenterIDChanged();
    partial void OnCollectionIDChanging(System.Nullable<System.Guid> value);
    partial void OnCollectionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Presenter()
		{
			this._MediaSections = new EntitySet<MediaSection>(new Action<MediaSection>(this.attach_MediaSections), new Action<MediaSection>(this.detach_MediaSections));
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[Column(Storage="_PresenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PresenterID
		{
			get
			{
				return this._PresenterID;
			}
			set
			{
				if ((this._PresenterID != value))
				{
					this.OnPresenterIDChanging(value);
					this.SendPropertyChanging();
					this._PresenterID = value;
					this.SendPropertyChanged("PresenterID");
					this.OnPresenterIDChanged();
				}
			}
		}
		
		[Column(Storage="_CollectionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Presenter_MediaSection", Storage="_MediaSections", ThisKey="PresenterID", OtherKey="PresenterID")]
		public EntitySet<MediaSection> MediaSections
		{
			get
			{
				return this._MediaSections;
			}
			set
			{
				this._MediaSections.Assign(value);
			}
		}
		
		[Association(Name="Collection_Presenter", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Presenters.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Presenters.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaSections(MediaSection entity)
		{
			this.SendPropertyChanging();
			entity.Presenter = this;
		}
		
		private void detach_MediaSections(MediaSection entity)
		{
			this.SendPropertyChanging();
			entity.Presenter = null;
		}
	}
}
#pragma warning restore 1591
